# %% [markdown]
# d3-test
Try editing this cell by clicking the pencil on the left!
# %%--- [html]
# properties:
#   run_on_load: true
# ---%%
<!DOCTYPE html>
<meta charset="utf-8">

<!-- Create an element where the map will take place -->
<svg id="my_dataviz" width="1000" height="1000" style="border:solid .5px black"></svg>
# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
await import("https://d3js.org/d3.v6.js")

// The svg
const svg = d3.select("#my_dataviz"),
  width = +svg.attr("width"),
  height = +svg.attr("height");

// Map and projection
const path = d3.geoPath();
const projection = d3.geoMercator()
  .scale(80000)
  .center([13.42, 52.51])
  .translate([width / 2, height / 2]);

// Data and color scale
// let data = new Map()

var data = await d3.json("https://raw.githubusercontent.com/JJestel/Data-Visualization/main/Sprint_1/data/data.json")
var total_by_district = d3.rollup(Object.values(data), v => d3.sum(v, d => d[2014] || 0), d => d.Bezirk)

const colorScale = d3.scaleThreshold()
  .domain([10000, 100000, 1000000, 10000000 ])
  .range(d3.schemeBlues[4]);

// Load external data and boot
const topo = await d3.json("https://raw.githubusercontent.com/funkeinteraktiv/Berlin-Geodaten/master/berlin_bezirke.geojson")
console.log(topo)
// const d = await d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world_population.csv")
// data.set(d.code, +d.pop)


// Draw the map
svg.append("g")
  .selectAll("path")
  .data(topo.features)
  .join("path")
    // draw each country
    .attr("d", d3.geoPath()
      .projection(projection)
    )
    // set the color of each district
    .attr("fill", function (d) {
      d.total = total_by_district.get(d.properties.name) || 0;
      return colorScale(d.total);
    });
