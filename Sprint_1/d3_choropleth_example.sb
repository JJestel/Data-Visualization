# %% [markdown]
# d3-test
Try editing this cell by clicking the pencil on the left!
# %%--- [html]
# properties:
#   run_on_load: true
# ---%%
<!DOCTYPE html>
<meta charset="utf-8">

<!-- Create an element where the map will take place -->
<div id="div_template">
  <svg id="choropleth" width=1000 height = 1000></svg>
</div>
# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
// load d3.js
await import("https://d3js.org/d3.v6.js")

// load institution data
var data = await d3.json("https://raw.githubusercontent.com/JJestel/Data-Visualization/main/Sprint_1/data/data.json")
var total_by_district = d3.rollup(Object.values(data), v => d3.sum(v, d => d[2014] || 0), d => d.Bezirk)
console.log(data)
console.log(total_by_district)
# %%--- [css]
# properties:
#   run_on_load: true
# ---%%
.circle:hover{
    stroke-width: 3;
}
# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
// The svg
var svg = d3.select("#choropleth")
const width = +svg.attr("width")
const height = +svg.attr("height")

// Map and projection
const path = d3.geoPath();
var projection = d3.geoMercator()
    .scale(80000)
    .center([13.42, 52.51])
    .translate([width / 2, height / 2]);

var colorScale = d3.scaleThreshold()
    .domain([10000, 100000, 1000000, 10000000])
    .range(d3.schemeBlues[5]);

// Load external data and boot
var topo = await d3.json("https://raw.githubusercontent.com/funkeinteraktiv/Berlin-Geodaten/master/berlin_bezirke.geojson")
console.log(topo)

// RESET PREVIOUSE CHILDREN OF SVG ELEMENT 
// TODO REMOVE FOR PRODUCTION?
svg.node().innerHTML = ''


// Create Tooltip
var Tooltip = d3.select("#div_template")
    .append("div")
    .style("opacity", 0)
    .attr("class", "tooltip")
    .style("background-color", "white")
    .style("border", "solid")
    .style("border-width", "2px")
    .style("border-radius", "5px")
    .style("padding", "5px")

// Three function that change the tooltip when user hover / move / leave a cell
const mouseover_district = function (event, d) {
    d3.selectAll(".district")
        .transition()
        .duration(200)
        .style("opacity", .7)
        .style("stroke", "grey")
        .style("stroke-width", "1")
    d3.select(this)
        .transition()
        .duration(200)
        .style("opacity", 1)
        .style("stroke", "grey")
        .style("stroke-width", "3")
    Tooltip
        .transition()
        .duration(200)
        .style("opacity", 1)
}
const mousemove_district = function (event, d) {
    Tooltip
        .html(d.properties.name)
        .style("left", (event.pageX + 20) + "px")
        .style("top", (event.pageY) + "px")
}
const mouseleave_district = function (event, d) {
    d3.selectAll(".district")
        .transition()
        .duration(200)
        .style("opacity", 1)
        .style("stroke", "DimGrey")
        .style("stroke-width", "1")
  
    if (event.toElement.tagName != 'circle') {
        Tooltip
            .transition()
            .duration(300)
            .style("opacity", 0);
    }
}


// Draw the map
svg.append("g")
    .selectAll("path")
    .data(topo.features)
    .join("path")
    // draw each country
    .attr("d", d3.geoPath()
        .projection(projection)
    )
    // set the color of each district
    .attr("fill", function (d) {
        d.total = total_by_district.get(d.properties.name) || 0;
        return colorScale(d.total);
    })
    .attr("class", d => 'district')
    .attr("stroke", "DimGrey")
    .on("mouseover", mouseover_district)
    .on("mousemove", mousemove_district)
    .on("mouseleave", mouseleave_district)

# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
// Add location bubbles
const mouseover_location = function (event, d) {
    Tooltip.style("opacity", 1)
}
const mousemove_location = function (event, d) {
    Tooltip
        .html(d.Institution_Kultureinrichtungen)
        .style("left", (event.pageX + 20) + "px")
        .style("top", (event.pageY) + "px")
}
const mouseleave_location = function (event, d) {
    Tooltip.style("opacity", 0)
}

var scale = d3.scaleLinear()
    .domain([1, 1.5e6])
    .range([2, 15])

svg.selectAll("myCircles")
    .data(Object.values(data))
    .join("circle")
    .attr("cx", d => projection([d.Lon, d.Lat])[0])
    .attr("cy", d => projection([d.Lon, d.Lat])[1])
    .attr("r", d => scale(d[2014]) || 1)
    .attr("class", "circle")
    .style("fill", "black")
    .attr("stroke", "DimGrey")
    .attr("stroke-width", 0.3)
    .attr("fill-opacity", .6)
    .on("mouseover", mouseover_location)
    .on("mousemove", mousemove_location)
    .on("mouseleave", mouseleave_location)
# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
// LEGEND
// create a list of keys
const keys = [10000, 100000, 1000000, 10000000, 100000000]
const legend_text = {
	10000: '< 10k visitors',
  	100000: '10k - 100k visitors',
  	1000000: '100k - 1m visitors',
  	10000000: '1m - 10m visitors',
  	100000000: '> 10m visitors'
}

// Add one dot in the legend for each name.
var size = 20
svg.selectAll("mydots")
    .data(keys)
    .enter()
    .append("rect")
    .attr("x", 775)
    .attr("y", function (d, i) { return 50 + i * (size + 5) }) // 100 is where the first dot appears. 25 is the distance between dots
    .attr("width", size)
    .attr("height", size)
    .style("fill", function (d) { return colorScale(d) })

// Add one dot in the legend for each name.
svg.selectAll("mylabels")
    .data(keys)
    .enter()
    .append("text")
    .attr("x", 775 + size * 1.2)
    .attr("y", function (d, i) { return 50 + i * (size + 5) + (size / 2) }) // 100 is where the first dot appears. 25 is the distance between dots
    .style("fill", function (d) { return colorScale(d) })
    .text(d => legend_text[d])
    .attr("text-anchor", "left")
    .style("alignment-baseline", "middle")